import{_ as t,M as o,p as e,q as p,Q as s,t as n,N as c,a1 as i}from"./framework-cd43f88a.js";const l={},u=i(`<h1 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h1><blockquote><p>本篇主要關心的是 browser runtime，如果把 Node runtime 混再一起說明會很混亂，例如 Node 頂層 this 指向 <code>module.exports</code>，但 function 中 this 指向 <code>global</code>...，等未來有時間深入 Node 再另開一篇文章研究研究</p></blockquote><h2 id="what-is-this" tabindex="-1"><a class="header-anchor" href="#what-is-this" aria-hidden="true">#</a> What is &quot;this&quot;?</h2><h3 id="this-是由-execution-context-創建時主動建立的變數-variable-並且將-this-指向某個變數-指向是會隨著" tabindex="-1"><a class="header-anchor" href="#this-是由-execution-context-創建時主動建立的變數-variable-並且將-this-指向某個變數-指向是會隨著" aria-hidden="true">#</a> &quot;this&quot; 是由 execution context 創建時主動建立的變數(variable)，並且將 this 指向某個變數，指向是會隨著</h3><ul><li><p>整個程式運行所創建的第一個 execution context 為 global execution context，JS Engine 會主動建立一個 global object(browser 為 <code>window</code>)、和 <code>this</code>，並且 global 中的 <code>this</code> 指向 global object。</p></li><li><p>但 <code>strick mode</code> 嚴格模式不綁定 <code>this</code>，因此 <code>strick mode</code> 的 <code>this</code> 為 <code>undefined</code></p></li></ul><h3 id="最基本的-this-指向呼叫他的-context" tabindex="-1"><a class="header-anchor" href="#最基本的-this-指向呼叫他的-context" aria-hidden="true">#</a> 最基本的 &quot;this&quot;: 指向呼叫他的 context</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;outside&#39;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;inside&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">insideFn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">insideFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// fn 的上一層 context 是 obj，因此 log 為 &#39;inside&#39;</span>
<span class="token keyword">const</span> newFn <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn
<span class="token function">newFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// newFn 的上一層 context 指向 global context，因此 log 為 &#39;outside&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this-in-arrow-function" tabindex="-1"><a class="header-anchor" href="#this-in-arrow-function" aria-hidden="true">#</a> &quot;this&quot; in arrow function:</h3><p>這問題很單純，因為 arrow fn 沒有 this，所以 arrow fn 裡面的 this 就跟其他變數一樣，這個 scope 沒有就一路往 scope chain 找，直到找到其他有意義的 this 或是 global this 為止。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// arrow fn 怎麼對待變數 a，就會怎麽對待 this</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">const</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="obj-的-this-指向自己本身" tabindex="-1"><a class="header-anchor" href="#obj-的-this-指向自己本身" aria-hidden="true">#</a> obj 的 this 指向自己本身</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">showNum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="「obj-fn-中的-fn」-this-會指回-global-object" tabindex="-1"><a class="header-anchor" href="#「obj-fn-中的-fn」-this-會指回-global-object" aria-hidden="true">#</a> 「obj fn 中的 fn」 - this 會指回 global object</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">showNum</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>
    <span class="token keyword">function</span> <span class="token function">showInsideNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
    <span class="token function">showInsideNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">showNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="call-apply-bind" tabindex="-1"><a class="header-anchor" href="#call-apply-bind" aria-hidden="true">#</a> call, apply, bind</h3><ul><li>這些方法的目的都是改變 this 指向</li><li>call, apply 可以看作另外指定 &quot;this&quot; 的 invoke, 兩者只差在入參方式不同</li><li>bind 只單純綁定後 return 一個 function，不會 invoke function</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...承上例</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token function-variable function">showNumAndProps</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span><span class="token function">showNumAndProps</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 2, 3, 4</span>
obj2<span class="token punctuation">.</span><span class="token function">showNumAndProps</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 1, 3, 4</span>
obj2<span class="token punctuation">.</span><span class="token function">showNumAndProps</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 1, 3, 4</span>
<span class="token comment">// * obj2.showNumAndProps.bind(obj1, 3, 4) will return a function that already bind this.</span>
<span class="token keyword">const</span> showBind <span class="token operator">=</span> obj2<span class="token punctuation">.</span><span class="token function">showNumAndProps</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token function">showBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1, 3, 4</span>
<span class="token comment">// * after bind, &quot;this&quot; can&#39;t retarget again.</span>
<span class="token function">showBind</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1, 3, 4</span>
<span class="token function">showBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1, 3, 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),r={href:"https://blog.techbridge.cc/2019/02/23/javascript-this/",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=o("ExternalLinkIcon");return e(),p("div",null,[u,s("p",null,[n("參考連結: "),s("a",r,[n("淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂"),c(a)]),n(" @huli blog")])])}const m=t(l,[["render",d],["__file","this.html.vue"]]);export{m as default};
