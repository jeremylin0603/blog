import{_ as o,M as p,p as c,q as l,Q as n,t as s,N as e,a1 as t}from"./framework-cd43f88a.js";const i={},u=t(`<h1 id="truthy-falsy-nullish" tabindex="-1"><a class="header-anchor" href="#truthy-falsy-nullish" aria-hidden="true">#</a> truthy &amp; falsy &amp; nullish</h1><p>JS 擁有「強制型轉」的特性，在判斷式中並不是只有 boolean 才能被判讀，以下列出所有在判斷式中會被強制型轉成 boolean 的類別</p><h3 id="truthy" tabindex="-1"><a class="header-anchor" href="#truthy" aria-hidden="true">#</a> Truthy</h3><ul><li>以下判斷式皆會被執行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">12n</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="falsy" tabindex="-1"><a class="header-anchor" href="#falsy" aria-hidden="true">#</a> Falsy</h3><p><code>false</code>, <code>0</code>, <code>-0</code>, <code>0n</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code></p><h3 id="nullish" tabindex="-1"><a class="header-anchor" href="#nullish" aria-hidden="true">#</a> Nullish</h3><p><code>null</code>, <code>undefined</code></p>`,9),r={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="能定義清楚就不要偷懶-放過自己也放過同事" tabindex="-1"><a class="header-anchor" href="#能定義清楚就不要偷懶-放過自己也放過同事" aria-hidden="true">#</a> 能定義清楚就不要偷懶，放過自己也放過同事</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> == &amp; ===</h4><p>個人認為開發時沒有任何理由能夠使用 == 徒增風險，唯一指定 ===</p><h4 id="字串判斷" tabindex="-1"><a class="header-anchor" href="#字串判斷" aria-hidden="true">#</a> 字串判斷</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** &quot;status&quot; here maybe &quot;&quot;(falsy) or &quot;ok&quot;(truthy) */</span>

<span class="token comment">// bad</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// even better</span>
<span class="token keyword">const</span> isSuccess <span class="token operator">=</span> status <span class="token operator">===</span> <span class="token string">&quot;ok&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token comment">// or avoid magic string</span>
<span class="token keyword">const</span> ok <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> ok<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-number" tabindex="-1"><a class="header-anchor" href="#string-number" aria-hidden="true">#</a> String &amp; Number</h4><p>最容易出事的就是 <code>String</code> &amp; <code>Number</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;ha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常有人習慣在 <strong>Logical Operator(&amp;&amp;)</strong> 中依賴 String 或 Number 作爲條件判斷(我曾經也是 QQ)，導致怎麼死的都不知道</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 常會認為只要有值就能過，殊不知 (num = 0) || (str = &#39;&#39;) 皆為 false</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>num <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>str<span class="token punctuation">)</span> <span class="token operator">...</span>

<span class="token comment">// 如果只是要判斷有沒有值，可以寫個簡單的判斷函式</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hasValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils&#39;</span>
<span class="token keyword">const</span> hasNum <span class="token operator">=</span> <span class="token function">hasValue</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>num<span class="token punctuation">)</span>
<span class="token keyword">const</span> hasStr <span class="token operator">=</span> <span class="token function">hasValue</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>str<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>hasNum <span class="token operator">&amp;&amp;</span> hasStr<span class="token punctuation">)</span> <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_0-0" tabindex="-1"><a class="header-anchor" href="#_0-0" aria-hidden="true">#</a> &quot;0&quot; &amp; 0</h4><p>String <code>&quot;0&quot;</code> 為 Truthy，Number <code>0</code> 為 Falsy，總之與其這麼麻煩不如開發的時候清楚定義就萬無一失</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isPass <span class="token operator">=</span> data<span class="token punctuation">.</span>num <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPass<span class="token punctuation">)</span> <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> REF</h4>`,14),k={href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Glossary/Nullish",target:"_blank",rel:"noopener noreferrer"};function h(b,f){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("延伸閱讀 - 好用新語法 "),n("a",r,[s("Nullish coalescing"),e(a)])])]),d,n("p",null,[n("a",k,[s("Truthy"),e(a)]),s(" @MDN")]),n("p",null,[n("a",m,[s("Falsy"),e(a)]),s(" @MDN")]),n("p",null,[n("a",v,[s("Nullish"),e(a)]),s(" @MDN")])])}const g=o(i,[["render",h],["__file","truthy-falsy-nullish.html.vue"]]);export{g as default};
