import{_ as l,M as a,p as c,q as d,N as e,Q as n,t as s,V as i,a1 as t}from"./framework-cd43f88a.js";const u={},h=n("h1",{id:"prettier",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prettier","aria-hidden":"true"},"#"),s(" Prettier")],-1),m=n("h2",{id:"一-what-is-prettier",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-what-is-prettier","aria-hidden":"true"},"#"),s(" （一）What is Prettier？")],-1),k=n("em",null,"(武斷、固執的)",-1),v=n("br",null,null,-1),b=t('<p>Prettier 是具有<strong>固定理念</strong>的開發工具，負責管理、格式化程式碼，僅有少量的配置選項。<br> 理念核心是「讓使用者開發的時候能夠忽略所有格式相關的問題」，將程式碼基於「可讀性」和「可維護性」來自動格式化</p><h2 id="二-why-prettier" tabindex="-1"><a class="header-anchor" href="#二-why-prettier" aria-hidden="true">#</a> （二）Why Prettier？</h2><p>管理團隊 coding style，避免提交後還要修改的風險，保證專案中每一個角落的 code 都維持一至的風格，省去人為錯誤，而且基本上開箱即用，可以立即投入開發。</p><h2 id="三-how-prettier-work" tabindex="-1"><a class="header-anchor" href="#三-how-prettier-work" aria-hidden="true">#</a> （三）How Prettier work？</h2><p>將既有程式轉換成一種中間態格式：AST ，轉換後按照設定的格式內容重新輸出。 就像室內重新裝潢，把裝潢拆光留下屋內本身必要的功能和管線，然後再按照你的需求重新上裝潢。</p><h3 id="ast-abstract-syntax-tree" tabindex="-1"><a class="header-anchor" href="#ast-abstract-syntax-tree" aria-hidden="true">#</a> AST - Abstract Syntax Tree</h3><p>一種用來紀錄程式的結構，只保留運行時必要的內容，不關心不影響運行的格式，runtime 如 browser 或是 Node 都是藉由 parser 將 JS file 轉成 AST 後才能命令電腦執行。</p>',7),q={href:"https://prettier.io/playground/",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),_=t(`<h2 id="四-how-to-use" tabindex="-1"><a class="header-anchor" href="#四-how-to-use" aria-hidden="true">#</a> （四）How to use?</h2><blockquote><p>由於 prettier 是 Opinionated 的，因此理想請況下是無需任何配置即可使用，相對的也不會開放太多配置選項。 且 Prettier 並沒有太多 Opinionated 的缺陷，就算開發中途要加入也行 - 前題是所有共同開發者先有共識，否則會出現各種抱怨甚至導致士氣低落影響開發。</p></blockquote><h4 id="專案中單獨使用指令使用" tabindex="-1"><a class="header-anchor" href="#專案中單獨使用指令使用" aria-hidden="true">#</a> 專案中單獨使用指令使用</h4><ol><li><p>Install prettier to 開發依賴 <code> pnpm add -D prettier</code></p></li><li><p>在專案根目錄新增 <code>.prettierrc.json</code> 並按照需求配置：</p></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 允許長度</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token comment">// 一次 tab 為幾個空白</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token comment">// 句尾分號</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 是否單引號優先</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 句尾逗號</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// {} 間強制空白</span>
  <span class="token property">&quot;bracketSpacing&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// arrow fn 入參時強制括號</span>
  <span class="token property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在 package.json 註冊 prettier 執行指令</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// ptr 只是我自己習慣用的，自己定義好就行</span>
  <span class="token property">&quot;ptr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write &#39;**/*.{md,vue,js,ts,json}&#39;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vs-code-儲存時自動排版" tabindex="-1"><a class="header-anchor" href="#vs-code-儲存時自動排版" aria-hidden="true">#</a> vs code 儲存時自動排版</h4><ol><li>確定 VS Code 有安裝插件 &quot;Prettier - Code formatter&quot;</li><li>cmd + shift + p 呼叫 setting config</li><li>加入設定</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 儲存後自動格式化</span>
<span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token comment">// 指定負責格式化的套件</span>
<span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// 也能另外針對個別語言指定負責格式化的套件</span>
<span class="token property">&quot;[javascript]&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>許多教學會用 VSCode 的設定介面操作，但我個人偏好直接修改設定檔，可以很清楚的掌握自己在做什麼事</p></blockquote><h2 id="五-work-with-git" tabindex="-1"><a class="header-anchor" href="#五-work-with-git" aria-hidden="true">#</a> (五) Work with Git</h2><ul><li>利用 Git hook 來確保能上 commit 的程式都是經過 Prettier 校驗的</li></ul>`,13),f=n("br",null,null,-1),y={href:"https://mrm.js.org/",target:"_blank",rel:"noopener noreferrer"},x=t(`<p><code>npx mrm lint-staged</code></p><p>運行後專案會在根目錄上新增.husky folder、並且在 package.json 產生相應配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;husky&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=7&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=10&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;*.{md,vue,js,ts,json}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --fix&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常見問題" tabindex="-1"><a class="header-anchor" href="#常見問題" aria-hidden="true">#</a> 常見問題</h2><h4 id="編輯器不會跳提示" tabindex="-1"><a class="header-anchor" href="#編輯器不會跳提示" aria-hidden="true">#</a> 編輯器不會跳提示</h4>`,5);function w(j,S){const p=a("BaseImg"),o=a("RouterLink"),r=a("ExternalLinkIcon");return c(),d("div",null,[h,e(p,{src:"https://i.imgur.com/cnrwEb0.png",isAutoSize:""}),m,n("blockquote",null,[n("p",null,[s('Prettier is an "Opinionated '),k,s('" code formatter, has few options.'),v,s(" 延伸閱讀 - "),e(o,{to:"/code-memo/opinionated.html"},{default:i(()=>[s("Opinionated vs Unopinionated")]),_:1})])]),b,n("p",null,[s("實際轉換過程可以到 "),n("a",q,[s("prettier playground"),e(r)]),g,s(' ps: 需要開啟左下角設定裡的 "open AST" 選項')]),_,n("p",null,[s("我們需要兩個套件來實現: lint-stage & husky"),f,s(" 這邊可以直接用 "),n("a",y,[s("mrm"),e(r)]),s(" 來簡化配置流程，同時裝好兩個套件和各自的基本配置")]),x,n("ul",null,[n("li",null,[s("Prettier-vscode 本身不具備 highlight 的功能，需要整合到 ESLint 讓 ESLint-vscode 協助 highlight 效果，詳見"),e(o,{to:"/code-memo/linter-and-formatter.html"},{default:i(()=>[s("ESLint & Prettier")]),_:1})])])])}const E=l(u,[["render",w],["__file","prettier.html.vue"]]);export{E as default};
