import{_ as r,M as o,p as c,q as u,N as e,Q as n,t as s,V as i,a1 as t}from"./framework-cd43f88a.js";const d={},k=n("h1",{id:"eslint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eslint","aria-hidden":"true"},"#"),s(" ESLint")],-1),v=t(`<h2 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> create @eslint/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;es2021&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token comment">//</span>
    <span class="token string">&quot;plugin:vue/vue3-essential&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugin&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;overrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;*-test.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.spec.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;no-unused-expressions&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="root" tabindex="-1"><a class="header-anchor" href="#root" aria-hidden="true">#</a> root</h4><p><code>.eslint.*</code> 會自動從所在目錄向上查找有無其他 <code>.eslint.*</code> 並進行合併，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>your-project
├── .eslintrc.json  &lt;--- your-project/.eslintrc.json
├── lib
│ └── source.js
└─┬ tests
  ├── .eslintrc.json &lt;--- test/.eslintrc.json
  └── test.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>合併時內層優先級最高，以上表結構為例，內層 <code>test/.eslintrc.json</code> 的規則優先級會高於外層 <code>your-project/.eslintrc.json</code></p><p>root 屬性為 true 表達該檔案為規則合併的根，意即 <code>test/.eslintrc.json</code> 的規則會一路查找到根目錄或是 <code>root: true</code> 的 config 檔案為止</p><p><strong>這個屬性能夠避免專案內嵌時可能發生的意外，建議專案根目錄的 eslint config 都應該配置</strong></p><h4 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h4><p>由于 JS 可以運行於不同的 runtime，而不同的 runtime 會提供不同的 API 作為全域變數使用，env 用於向 ESLint 表示專案的開發環境，舉個例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token comment">// error: &#39;module&#39; is not defined. eslint(no-undef)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于變數 module 是 Node.js 依據 CommonJS 規範所提供的全域變數，所以通常無需特別引入即可使用，但 ESLint 不會先預設任何開發環境，所以報錯<br><code>&#39;module&#39; is not defined. eslint(no-undef)</code><br> 此時就需要告訴 ESLint 我們的 runtime 是 Node.js</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),m={href:"https://eslint.org/docs/latest/use/configure/language-options",target:"_blank",rel:"noopener noreferrer"},g=t(`<h4 id="rules" tabindex="-1"><a class="header-anchor" href="#rules" aria-hidden="true">#</a> rules</h4><ul><li>可以配置所有 ESLint 提供的規則，插件<a href="#plugins">plugins</a>提供的規則一樣在這邊配置</li><li>優先級永遠高於 <a href="#extends">extends</a></li><li>規則可粗分三個階級，有 Number &amp; String 兩種表達方式 <ul><li>0 | &quot;none&quot;: 關閉規則</li><li>1 | &quot;warn&quot;: 僅提醒，不會阻止運行</li><li>2 | &quot;error&quot;: 報錯，阻止運行</li></ul></li><li>部分規則本身帶有除了三個停醒階級以外的選項，例如</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;array-bracket-newline&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">&quot;multiline&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token property">&quot;minItems&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>規則可藉由註解在部分區塊中配置或關閉，但這種做法會增加專案維護風險需謹慎使用 ex:<br><code>/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</code><br><code>/* eslint-disable */</code></p></li><li><p>上述的區塊註解可以藉由<code>noInlineConfig</code>選項關閉</p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;noInlineConfig&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b={href:"https://eslint.org/docs/latest/rules/",target:"_blank",rel:"noopener noreferrer"},h=t(`<h4 id="extends-plugins" tabindex="-1"><a class="header-anchor" href="#extends-plugins" aria-hidden="true">#</a> extends &amp; plugins</h4><blockquote><p>extends 和 plugins 很容易搞混，這邊為了方便比較放在一起說明</p></blockquote><h5 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h5><p>每一個開發團隊都應該有一套大家共同遵守的 coding style，其中 eslint config 按照共識配置好一個設定檔後就會沿用到所有專案上，此時這套 config 如果都要用複製貼上大法搬移就太麻煩了。<br> eslint 本身提供一套方法讓大家可以把自己的 config 配置上傳到 npm，之後只要直接引用即可，甚至如果你是 google 這種赫赫有名的團隊，大家還能直接把你們的設定抓過來用，例如<code>eslint-config-google</code> or <code>eslint-config-airbnb</code>。</p><p>這個整包可引用的 ESLint config 配置就是屬於 extends</p><p>notice:</p><ul><li><p>eslint 本身內建兩套 extends <code>eslint:recommended</code> &amp; <code>eslint:all</code>，通常使用「recommended」後再按照需求配置細節</p></li><li><p>extends 具有後蓋前的特性，陣列的最後一個配置會覆蓋前面的</p></li><li><p>extends 包須符合命名規則 <code>eslint-config-*</code>，使用上可以忽略前綴做使用，例如 <code>eslint-config-prettier</code>，可以直接稱作 <code>prettier</code></p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 全名為 eslint-config-prettier</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),f=n("li",null,[n("p",null,"注意 config 不單只是 rules 的集成，而是一整包設定檔，可以包含 root、extends、plugins、rules 等所有配置")],-1),q={href:"https://eslint.org/docs/latest/extend/shareable-configs",target:"_blank",rel:"noopener noreferrer"},_=t(`<h5 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h5><p>前面提到 extends 是圍繞在 ESLint <strong>本身提供的設定檔</strong> 集成的一包 config，相對的 plugins 則是為了要使用 ESLint <strong>本身不具備的「規則」</strong>，另行開發插件來讓 ESLint 協助運行。<br> 例如常見的前端框架 React &amp; Vue，都有自己定義的檔案結構和語法，此時就需要另行開發插件(plugins)並定義相應的規則，讓 ESLint 也能藉由這些自定義的規則做檢查。</p><p>notice:</p><ul><li><p>plugins 本身是一套 ESLint 之外的規則集成，只「提供」規則，不會主動「開啟」規則，要使用 plugins 中的規則需要自行配置 rules，或是看有沒有相應的 config 可以使用 ex: <code>eslint-config-vue/standard</code></p></li><li><p>plugins 同 extends 一樣有命名規範 <code>eslint-plugin-*</code>，使用上一樣能省略前綴 ex: <code>eslint-plugin-prettier</code> 省略後 <code>prettier</code></p></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 全名為 eslint-plugin-prettier</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="plugin-in-extends" tabindex="-1"><a class="header-anchor" href="#plugin-in-extends" aria-hidden="true">#</a> plugin in extends</h5><p>許多 plugin 套件本身就包含相應的 config 配置，例如 <code>eslint-plugin-prettier</code> 的 source code 可以看到</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 提供一包 config</span>
  <span class="token literal-property property">configs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">recommended</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;prettier&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;prettier&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;prettier/prettier&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;arrow-body-style&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;prefer-arrow-callback&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">prettier</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// plugin rules...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像這樣 plugin 本身提供的 config 可以直接引入 extends 做使用，命名上也有規範<br><code>plugin:your-plugin-name/config-name</code> 例如 plugin &quot;prettier&quot; 提供一個 config 叫 &quot;recommended&quot;，則我們可以這樣引入</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:prettier/recommended&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>請注意這邊是幫你寫好設定而已，recommended 中的 extends: [&#39;eslint-config-prettier&#39;] 依然要自己安裝依賴</strong></p>`,11),y={href:"https://eslint.org/docs/latest/extend/plugins",target:"_blank",rel:"noopener noreferrer"},x=n("h4",{id:"overrides",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),s(" overrides")],-1),j=n("p",null,[n("em",null,"目前還沒遇到用得到的場景，未來有用到再回來補充細節。")],-1),S=n("p",null,"官方解釋是這樣說的：",-1),L=n("blockquote",null,[n("p",null,"Allows to override configuration for files and folders, specified by glob patterns")],-1),E=n("p",null,"能夠直接針對特定的檔案，給予不同的 rules，優先級高於 rules",-1),w=n("h4",{id:"parser",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parser","aria-hidden":"true"},"#"),s(" parser")],-1),C={href:"https://www.npmjs.com/package/esprima",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"此時我們可以另外安裝",-1),N={href:"https://www.npmjs.com/package/@babel/eslint-parser",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.npmjs.com/package/@typescript-eslint/parser",target:"_blank",rel:"noopener noreferrer"},V=t(`<h4 id="parseroptions" tabindex="-1"><a class="header-anchor" href="#parseroptions" aria-hidden="true">#</a> parserOptions</h4><p>解析器的選項，沒特別用過未來有機會再補充</p><p>附上使用範例至少能有點感覺</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// for esprima options</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常見問題" tabindex="-1"><a class="header-anchor" href="#常見問題" aria-hidden="true">#</a> 常見問題</h2><h3 id="編輯器沒有提示" tabindex="-1"><a class="header-anchor" href="#編輯器沒有提示" aria-hidden="true">#</a> 編輯器沒有提示</h3>`,6),A={href:"https://eslint.org/docs/latest/use/integrations",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"esm-模式下不生效",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#esm-模式下不生效","aria-hidden":"true"},"#"),s(" ESM 模式下不生效")],-1),R=n("ul",null,[n("li",null,[s("將副檔名改為"),n("code",null,".cjs"),n("blockquote",null,[n("p",null,'use .eslintrc.cjs when running ESLint in JavaScript packages that specify "type":"module" in their package.json. Note that ESLint does not support ESM configuration at this time.')])])],-1),M=n("h3",{id:"報錯循環-自動格式化一直報錯",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#報錯循環-自動格式化一直報錯","aria-hidden":"true"},"#"),s(" 報錯循環，自動格式化一直報錯")],-1),O=n("h2",{id:"ref",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ref","aria-hidden":"true"},"#"),s(" Ref")],-1),J={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"};function P(F,z){const l=o("BaseImg"),a=o("ExternalLinkIcon"),p=o("RouterLink");return c(),u("div",null,[k,e(l,{src:"https://i.imgur.com/AMj8T5L.jpeg",isAutoSize:""}),v,n("p",null,[s("其他環境配置詳見"),n("a",m,[s("Configure Language Options"),e(a)]),s(" @official")]),g,n("ul",null,[n("li",null,[s("更多 rules 配置詳見 "),n("a",b,[s("Rules Reference"),e(a)]),s(" @official")])]),h,n("ul",null,[f,n("li",null,[n("p",null,[s("自制 extends config 詳見 "),n("a",q,[s("Share Configurations"),e(a)]),s(" @official")])])]),_,n("ul",null,[n("li",null,[s("更多關於 plugins 配置詳見 "),n("a",y,[s("Create Plugins"),e(a)]),s(" @official")])]),x,j,S,L,E,w,n("p",null,[s("解析器，負責將程式碼轉換成 ESLint 能夠理解的 "),e(p,{to:"/code-memo/prettier.html#ast-abstract-syntax-tree"},{default:i(()=>[s("AST")]),_:1}),s("。")]),n("p",null,[s("ESLint 內建的解析器 "),n("a",C,[s("esprima"),e(a)]),s(" 是針對 ECMAScript 當前的版本解析，因此若我們使用一些實驗性的語法(由 Babel 轉譯)、或是寫 TypeScript 的時候，就超出了 esprima 能讀懂的範圍了。")]),I,n("ul",null,[n("li",null,[n("a",N,[s("@babel/eslint-parser"),e(a)])]),n("li",null,[n("a",T,[s("@typescript-eslint/parser"),e(a)]),s(" 協助將 esprima 陌生的語法例如 Typescript，轉成 ESLint 能夠解析的 AST")])]),V,n("ul",null,[n("li",null,[s("檢查編輯器套件是否生效 "),n("a",A,[s("ESLint integration"),e(a)]),s(" @official")])]),B,R,M,n("ul",null,[n("li",null,[s("可能是規則和其他 Formatter 衝突，請見 "),e(p,{to:"/code-memo/linter-and-formatter.html"},{default:i(()=>[s("ESLint & Prettier")]),_:1})])]),O,n("p",null,[n("a",J,[s("ESLint Official"),e(a)])])])}const D=r(d,[["render",P],["__file","eslint.html.vue"]]);export{D as default};
