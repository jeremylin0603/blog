import{_ as l,M as r,p as c,q as p,Q as e,t as n,N as t,V as o,R as d,a1 as a}from"./framework-cd43f88a.js";const u={},m=e("h1",{id:"eslint-prettier",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#eslint-prettier","aria-hidden":"true"},"#"),n(" ESLint & Prettier")],-1),h=e("p",null,"現代前後端分離、多人協作的開發模式早已離不開 Linter & Formatter 這些工具，但開發新專案或是公司換新電腦時很容易遇到這些工具出了問題，例如 Linter 沒有提示，或是 Formatter 不生效，甚至是彼此間互相衝突...就算 google 後排除了問題，其實也沒真正搞懂他們彼此間的關係，只是讓編輯器維持著不清不楚的恐怖平衡而已，所以這篇就來一口氣釐清。",-1),v=e("li",null,"這篇是圍繞著 VSCode 描述的",-1),k={href:"https://code.visualstudio.com/docs/editor/codebasics#_formatting",target:"_blank",rel:"noopener noreferrer"},g=a('<h2 id="linter-vs-formatter" tabindex="-1"><a class="header-anchor" href="#linter-vs-formatter" aria-hidden="true">#</a> Linter vs Formatter</h2><p>Linter 跟 Formatter 看似負責的事情都差不多，但目的卻是大相徑庭，所以得先釐清兩者的關係</p><p><code>ESLint</code> 是 Linter，主要負責 Code quality，良好的 Code quality 能夠降低出現低級 bug 的風險，例如使用變數時少打一個字，或是在變數宣告前就使用它。</p><p><code>Prettier</code> 是 Formatter，主要負責 Code Formatting，良好的 Code Formatting 能夠提升程式碼的可讀性和可維護性，例如陣列元素之間適當的間隔，或是一行內過多的訊息適當的換行。</p><p>而容易混淆的地方在於 <code>ESLint</code> 本身也有提供 Code Formatting 的功能，當與 Prettier 共同使用時如果沒有做好配置就會產生兩邊的衝突 - ESLint 說可以但是 Prettier 說不行，照著 Prettier 做了以後 ESLint 又不給過了，甚至照著教學配置了儲存後自動格式化，還會被自動儲存綁架讓程式碼永遠過不了編譯。</p><h2 id="why-not-just-eslint-but-prettier" tabindex="-1"><a class="header-anchor" href="#why-not-just-eslint-but-prettier" aria-hidden="true">#</a> Why not just ESLint, but Prettier?</h2><p>為何不用 ESLint 就好，還要特地裝一個 Prettier？用 Prettier 有什麼好處？不用不行嗎？</p><p>我認爲這個問題真的見仁見智，不用當然可以，事實上就有一派開發人員只用 ESLint，因為他們受不了 Prettier 的「霸道」和吝嗇的配置選項。</p>',8),b=a(`<h2 id="prettier-in-eslint" tabindex="-1"><a class="header-anchor" href="#prettier-in-eslint" aria-hidden="true">#</a> Prettier in ESLint</h2><p>讓 Prettier 在 ESLint 中運作最主要是為了解決兩者間的衝突，後面會說明這種作法的優劣。</p><p>首先解決衝突需要以下兩個步驟：</p><ol><li>關閉 ESLint 所有關於風格的規則</li><li>在 ESLint 中引入 Prettier</li></ol><h4 id="_1-關閉-eslint-所有關於風格的規則" tabindex="-1"><a class="header-anchor" href="#_1-關閉-eslint-所有關於風格的規則" aria-hidden="true">#</a> 1. 關閉 ESLint 所有關於風格的規則</h4><p>首先關閉 ESLint 只需要下載套件 <code>eslint-config-prettier</code> 後配置到 ESLint config 即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-config-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 這裡要注意 extend 順序關係到權重，prettier 放最下面能保證所有風格規則都有被確實關閉</span>
  <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...some other config,</span>
    <span class="token string">&quot;prettier&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-在-eslint-中引入-prettier" tabindex="-1"><a class="header-anchor" href="#_2-在-eslint-中引入-prettier" aria-hidden="true">#</a> 2. 在 ESLint 中引入 Prettier</h4><p>再來將 Prettier 引入 ESLint 只需要安裝套件 <code>eslint-plugin-prettier</code> 後配置到 ESLint 即可</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 這個設定讓 Prettier 也能夠藉由 ESLint 的幫助得到錯誤提示</span>
  <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;warn&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此一來 ESLint 就能抓到 .prettierrc.* 的配置並且協助執行了</p>`,12),_=e("code",null,"eslint-plugin-prettier",-1),f=e("p",null,"這樣配置後我們能得到以下幾點好處：",-1),S=e("ol",null,[e("li",null,"衝突消失了"),e("li",null,[n("權責分離， "),e("code",null,".prettierrc.*"),n(" for all document format & "),e("code",null,".eslintrc.*"),n(" for code Lint")]),e("li",null,"Prettier 得到了 ESLint 的 highlight 提示功能，可以有意識的學習 Prettier 的 best practices，主動去思考不同風格的優劣")],-1),L=e("p",null,"但也不全然都是好處，壞處則是反對 Prettier 的人最在意的：過於吝嗇的選項。也就是 Prettier 選項之外的規格你都不能改，就算想用 eslint rules 覆蓋也沒辦法...。",-1),x=e("br",null,null,-1),P={href:"https://github.com/prettier/prettier/issues/40#issuecomment-271659359",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/prettier/prettier-vscode/issues/352",target:"_blank",rel:"noopener noreferrer"},q=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原本希望的</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span> 
  <span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span> 
  <span class="token string">&#39;...string&#39;</span>
<span class="token punctuation">]</span>
<span class="token comment">// prettier 強制的</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;...string&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// hack 註解以避免換行 &gt; 在第一個元素右側加上註解符號</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span> <span class="token comment">//</span>
  <span class="token string">&#39;...string&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;...string&#39;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩下的在我個人使用上都挺好，開箱即用沒煩惱^^。</p><h2 id="補充" tabindex="-1"><a class="header-anchor" href="#補充" aria-hidden="true">#</a> 補充</h2><h3 id="vscode-setting" tabindex="-1"><a class="header-anchor" href="#vscode-setting" aria-hidden="true">#</a> VSCode Setting</h3><p><code>editor.formatOnSave</code>: <code>boolean</code></p><p>保存時格式化文件，若沒有特別指定 <code>editor.defaultFormatOnSave</code> 則會交由 VSCode 預設的 Formatter 處理。</p><p><code>editor.defaultFormatter</code>: <code>string</code></p><p>定義優先於其他所有格式化設定的的格式化插件，需要給予擴展插件的識別碼(identifier)，Prettier 識別碼：<code>&quot;esbenp.prettier-vscode&quot;</code></p>`,8),y=e("code",null,"editor.codeActionsOnSave",-1),C=e("code",null,"object",-1),F=e("code",null,"source.fixAll",-1),j=e("code",null,"source.fixAll.eslint: boolean",-1),V={href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",target:"_blank",rel:"noopener noreferrer"};function w(N,O){const s=r("ExternalLinkIcon"),i=r("RouterLink");return c(),p("div",null,[m,h,e("ul",null,[v,e("li",null,[n("VSCode 本身就有提供基本的 Formatter，能夠針對 JS、TS、JSON、HTML、CSS 格式化，但我個人偏好給 Prettier 處理，就不多贅述有興趣請至 "),e("a",k,[n("VSCode Formatting"),t(s)]),n(" @official")])]),g,e("p",null,[n("但我個人更欣賞 Prettier "),t(i,{to:"/code-memo/opinionated.html"},{default:o(()=>[n("Opinionated")]),_:1}),n(" 的精神，和少量的配置讓我無需把心思放在代碼風格上，而且 Linter 就專心維護 Code quality，其他所有檔案類型的風格問題都交給 Prettier 處理和配置，但要他們一起運行還需要費一點功夫，接著就來解決這個問題。")]),b,e("blockquote",null,[e("p",null,[_,n(" 本身就有提供一套 config 以簡化配置，可以直接參考"),t(i,{to:"/code-memo/eslint.html#plugin-in-extends"},{default:o(()=>[n("plugin in extends")]),_:1})])]),f,S,L,e("blockquote",null,[e("p",null,[n("我曾為了要讓 eslint rules 能夠阻止 Prettier 的換行問題不信邪的花了整整兩天，最終還是被 react 的共同開發者在 issue 發表的論點給說服了 - 別浪費糾結在那些風格的力氣。"),x,n(" These style differences don’t really matter, people care way too much about them. - "),e("a",P,[n("gaearon"),t(s)]),n(" @github")])]),e("p",null,[n("Prettier 我個人唯一在意的地方就是"),e("a",E,[n("宣告陣列時陣列中的元素換行問題 @prettier #issue 352"),t(s)]),n("，結論是要麻棄用 Prettier，或是用下面的 hack 註解來避免換行")]),d(" prettier-ignore "),q,e("p",null,[y,n(": "),C,n(", 針對 ESLint 自動格式化所新增的擴展，支持 "),F,n(" | "),j,n(" 更多詳見 "),e("a",V,[n("Improved Auto Fix on Save"),t(s)]),n(" @Official Doc - Version 2.0.4")])])}const T=l(u,[["render",w],["__file","linter-and-formatter.html.vue"]]);export{T as default};
