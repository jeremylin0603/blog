import{_ as o,M as l,p as r,q as i,Q as n,t as e,N as s,a1 as t}from"./framework-cd43f88a.js";const c={},p=t('<h1 id="ecmascript-syntax" tabindex="-1"><a class="header-anchor" href="#ecmascript-syntax" aria-hidden="true">#</a> ECMAScript syntax</h1><p>個人主觀將語法分三類</p><ul><li>Useful: 有正面效果，可以直接投入開發</li><li>Learn: 學習後能加深對語言生態的認知，平時開發用不太到</li><li>Danger: 有<strong>個人認為</strong>的負面效果，知道即可不建議投入開發</li></ul><h2 id="useful" tabindex="-1"><a class="header-anchor" href="#useful" aria-hidden="true">#</a> Useful</h2><h3 id="promise-allsettled" tabindex="-1"><a class="header-anchor" href="#promise-allsettled" aria-hidden="true">#</a> Promise.allSettled()</h3>',5),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"},u=t(`<ul><li>Handle multiple Promise type in an Array，當所有的 request 都取回 response 後回傳一個包含狀態(status <em>fulfilled</em> or <em>rejected</em>)和結果(success <em>value</em> or failed <em>reason</em>) 的 Array</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> collectPromises <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span>

Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>collectPromises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  results<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">/* (log print)
{ status: &#39;fulfilled&#39;, value: 3 }
{ status: &#39;rejected&#39;, reason: &#39;foo&#39; }
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>有個場景是一次處理多隻 API 的輪詢，其中包含狀態更新和 session 驗證等請求，只要其一 reject 整個網站就會停止所有動作並蓋上一個斷線遮罩，所有 API 回來後才會進到下一輪的輪詢倒數。<br> 當時是將請求放入陣列中，請求前計算陣列長度，當收到回傳時 -1，直到 0 則表示所有請求都回來了，再開始下一輪輪詢，處理起來不難但後來有這 API 後程式簡化許多。</p></blockquote><h3 id="dynamic-import" tabindex="-1"><a class="header-anchor" href="#dynamic-import" aria-hidden="true">#</a> Dynamic Import</h3>`,4),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"在定義 Vue Router 時官方就建議使用 Dynamic Import 了，使用者可以忍受每進一個新路由等待 0.5 秒，但絕對不能忍受剛進網站時多等 2 秒鐘。")],-1),k=n("h3",{id:"nullish",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nullish","aria-hidden":"true"},"#"),e(" Nullish (??)")],-1),v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",target:"_blank",rel:"noopener noreferrer"},b=n("blockquote",null,[n("p",null,[e("個人認為是針對 "),n("code",null,"a || b"),e(" 寫法的優化，JS 強制型轉的機制下傳統寫法只要是")])],-1),f=n("h3",{id:"string-prototype-replaceall",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-prototype-replaceall","aria-hidden":"true"},"#"),e(" String.prototype.replaceAll()")],-1),g={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"learn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#learn","aria-hidden":"true"},"#"),e(" Learn")],-1),x=n("h3",{id:"proxy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#proxy","aria-hidden":"true"},"#"),e(" Proxy")],-1),y={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},S=t('<ul><li>攔截針對物件的操作，可以理解為改寫了 dot 運算子(.)的行為</li></ul><h3 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h3><ul><li>為了取代 Object 而設計的 API</li><li>修改了原本 Object 的歷史問題，for example: <blockquote><p><code>delete obj[name]</code> &gt; <code>Reflect.deleteProperty(obj, name)</code><br><code>name in obj</code> &gt; <code>Reflect.has(obj, name)</code></p></blockquote></li></ul><h2 id="danger" tabindex="-1"><a class="header-anchor" href="#danger" aria-hidden="true">#</a> Danger</h2><h3 id="logical-assignment" tabindex="-1"><a class="header-anchor" href="#logical-assignment" aria-hidden="true">#</a> Logical Assignment</h3><ul><li>danger reason 個人認為語法違反直覺，影響可讀性，真要使用就用舊語法也沒有太大問題</li></ul><h4 id="logical-and-assignment" tabindex="-1"><a class="header-anchor" href="#logical-and-assignment" aria-hidden="true">#</a> Logical AND assignment (&amp;&amp;=)</h4>',7),j={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",target:"_blank",rel:"noopener noreferrer"},N=t(`<ul><li>Only assigns if x is truthy.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// old</span>
x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">)</span>

<span class="token comment">// new</span>
x <span class="token operator">&amp;&amp;=</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logical-or-assignment" tabindex="-1"><a class="header-anchor" href="#logical-or-assignment" aria-hidden="true">#</a> Logical OR assignment (||=)</h4>`,3),P={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment",target:"_blank",rel:"noopener noreferrer"},D=t(`<ul><li>Only assigns if x is falsy.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// old</span>
x <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">)</span>

<span class="token comment">// new</span>
x <span class="token operator">||=</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> Ref:</h2>`,3),R={href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://2022.stateofjs.com/zh-Hant/",target:"_blank",rel:"noopener noreferrer"};function O(M,J){const a=l("ExternalLinkIcon");return r(),i("div",null,[p,n("p",null,[n("a",d,[e("MDN"),s(a)])]),u,n("p",null,[n("a",h,[e("MDN"),s(a)])]),m,k,n("p",null,[n("a",v,[e("MDN"),s(a)])]),b,f,n("p",null,[n("a",g,[e("MDN"),s(a)])]),_,x,n("p",null,[n("a",y,[e("MDN"),s(a)])]),S,n("p",null,[n("a",j,[e("MDN"),s(a)])]),N,n("p",null,[n("a",P,[e("MDN"),s(a)])]),D,n("p",null,[n("a",R,[e("阮一峰 ES6"),s(a)]),e(" [MDN] "),n("a",A,[e("STATE OF JS 2022"),s(a)])])])}const U=o(c,[["render",O],["__file","es6-plus.html.vue"]]);export{U as default};
