import{_ as s,M as l,p as r,q as d,N as o,Q as e,V as n,t,a1 as c}from"./framework-cd43f88a.js";const h={},_=e("h1",{id:"javascript",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#javascript","aria-hidden":"true"},"#"),t(" Javascript")],-1),u=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),t(" 前言")],-1),m=e("p",null,"Javascript 最初只是為了要讓 User 在 browser 中填寫表單的時候可以先在本機做一些基本的驗證，以避免浪費頻寬而誕生的，寫他的大神用了 10 天硬幹出來，可想而知會有許多不嚴謹的地方，無論後面怎麼迭代語法，最基本的運行邏輯都不會變。",-1),p=e("p",null,"而這系列文章的目的是希望能夠從最底層的邏輯來重新認識 JS 的各種「特色」，例如 Hoisting、Scope、'this' keyword、Closure 等等，畢竟要講出他們的行為隨便 google 都一大堆，但是為什麼會有這些行為？JS 在背後做了什麼事？誰負責執行 JS？",-1),f=e("h2",{id:"目錄",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#目錄","aria-hidden":"true"},"#"),t(" 目錄")],-1),x=c('<li><a href="">2. Hoisting &amp; TDZ</a></li><li><a href="">3. Example explained</a></li><li><a href="">4. Chrome DevTool &amp; Call Stack</a></li><li><a href="">5. Who running JS?</a></li><li><a href="">6. Event loop</a></li>',5),w=e("h2",{id:"補充",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#補充","aria-hidden":"true"},"#"),t(" 補充")],-1);function k(g,v){const i=l("BaseImg"),a=l("RouterLink");return r(),d("div",null,[_,o(i,{src:"https://cdn.pixabay.com/photo/2019/10/03/12/12/javascript-4523100_960_720.jpg",isAutoSize:""}),u,m,p,f,e("ul",null,[e("li",null,[o(a,{to:"/code-memo/js-we-dont-know/execution-context.html"},{default:n(()=>[t("1. Execution Context & CallStack")]),_:1})]),x]),w,e("ul",null,[e("li",null,[o(a,{to:"/code-memo/js-we-dont-know/thread.html"},{default:n(()=>[t("單線程與同步執行")]),_:1})]),e("li",null,[o(a,{to:"/code-memo/js-we-dont-know/this.html"},{default:n(()=>[t("'this' keyword")]),_:1})]),e("li",null,[o(a,{to:"/code-memo/js-we-dont-know/hoisting.html"},{default:n(()=>[t("hoisting")]),_:1})]),e("li",null,[o(a,{to:"/code-memo/js-we-dont-know/truthy-falsy-nullish.html"},{default:n(()=>[t("truthy & falsy & nullish")]),_:1})])])])}const S=s(h,[["render",k],["__file","index.html.vue"]]);export{S as default};
